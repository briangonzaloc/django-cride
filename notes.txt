---------------------
The twelve-factor App
---------------------
SaaS- Sofwtare as a service
Principios:
- Formas declarativas de configuración: minimizar tiempo y costo para empezar a desarrollar
- Un contrato claro con el OS: portabilidad
- Listas para lanzar :
- Minimizar la difrencia entre entornos de desarrollo: agilidad
- Fácil de escalar: servir a mas usuarios, no cambiar la arquitectura o practicas de desarrollo

1- Codebase:  Se refiere a que nuestra app siempre debe estar trackeada por un sistema de control de versiones como Git, Mercurial, etc. Una sola fuente de verdad.

2- Dependencias: Una 12 factor app nunca debe depender de la existencia implícita de nuestro OS, siempre se declaran explícitamente qué dependencias usa el proyecto y se encarga de que estas no se filtren. Dependency Isolation (UTilizando virtual env, docker, etc).

3- Configuración: Acá nos referimos a algo que va a cambiar durante entornos.

4- Backing services: Estos pueden ser conectados y desconectados a voluntad. Es cualquier servicio que nuestra aplicación puede consumir a través de la red como Base de Datos, Mensajería y Cola, Envío de Emails o Caché.

5- Build, release, run: Separa estrictamente las etapas de construcción y las de ejecución. Build es convertir nuestro código fuente en un paquete.Release es la etapa donde agregamos a nuestro paquete cosas de configuración como variables de entorno y Run donde corremos la aplicación en el entorno correspondiente. Las etapas no se pueden mezclar.

6- Procesos: En el caso más complejo tenemos muchos procesos corriendo como Celery y Redis, en esta parte los procesos son stateless y no comparten nada. Cualquier dato que necesite persistir en memoria o en disco duro tiene que almacenarse en un backing services,

7- Port binding
8- Concurrency
9- Disposability

10- Dev/prod parity: Reducir la diferencia entre entornos para reducir tiempo entre deploys y las personas involucradas sean las mismas que puedan hacer el deploy

11- Logs

12- Admin processes: Tratar los procesos administrativos como una cosa diferente, no deben estar con la app.

-------------------------------
Arquitectura de una aplicacion
-------------------------------
https://github.com/kamranahmedse/developer-roadmap
Un Backend developer es un diseñador, su trabajo consiste un 90% en leer, diseñar, analizar y planear. Un 10% en programar. Nuestro trabajo más importante es el diseño del sistema y las decisiones tomadas son más costosas y más difíciles de cambiar.

El Backend consiste en:
    Servidor
    Aplicación
    Base de Datos

Arquitecturas 
-Monotlítica: Todo está manejado por el mismo servidor
-Distribuida: Los compnentes estan descoplados y son consumidos en la red
-Hibrido: Cómo se muetra el sitio web. Mezcla de de Frontend api y backend
-Orientados a servicios(SOA): El servicio:
	Es auto-contenido: no dependen de los demas, independiente del lenguaje de programacion
	Es una caja negra para los consumidores
	Representa una actividad de negocio con un fin específico


-Web services: la manera en que se implementan las arquitecturas orientadas a servicios.
Siguien estándares populares
	SOAP (xml)
	RESTful HTTP es stateless, protocolo HTTP.
	GraphQL Funciona más como un Query Language para las API, un lenguaje de consultas.

-------------------------
Codebase: Setting modular
-------------------------
Docker y Docker Compose

Contenedores/Servicios 4)
Django(:8000) - PostgreSQL(:5432) - Redis(:6379) como servidor de cache - Celery(:5555)
Celery esta cmpuesto de  3 servicios. FLower va a correr en el puerto 5555

Code 
https://github.com/pablotrinidad/cride-platzi/tree/1/Codebase

$ git clone -b 1/Codebase --single-branch https://github.com/pablotrinidad/cride-platzi.git
$ docker-compose -f local.yml build


Estructura directorio
config
	-settings
		-base.py
		-local.py
		-production.py
		-test.py
	-urls.py
	wsgi.py

setting/settings/base.py
libreria environ

----------------
Codebase: Docker
----------------
docker-compose -f local.yml build

Docker-composer crea imagenes:
- cride_local_celerybeat
- cride_local_celeryworker
- cride_local_django
- cride_local_flower
- cride_production_postgres

Ademas descargó las imagenes:
- python
- postgres

Crear la red, los volumenes y levanter los servicios:
$docker-compose -f local.yml up

-Para saber los contenedores que estan corriendo:
docker-compose -f local.yml ps

Corriendo en localhost:8000

-Para matar la aplicacion y detener los servicios:
$ docker-compose -f local.yml down

-Para evitar hacer '-f local.yml' se puede crear una variable de entorno en nuestra sesion de terminal
$ export COMPOSE_FILE=local.yml
Entonces despues se puede hacer
docker-compose build
docker-compose up
docker-compose ps
docker-compose down
Y asi docker va a saber que se hacer referencia al archivo local.yml

comandos administrativos
Luego tengo que interactuar con el manage.py para crear usuarios etc
-- rm para que docker cuando se termine de ejecutarse el comando, mate el contenedor
django es el servicio

$ export COMPOSE_FILE=local.yml
$ docker-compose run --rm django COMMAND
$ docker-compose run --rm django python manage.py createsuperuser


Luego si ejecutamos 
$ docker-compose ps
vemos que no nos creo otro contenedor porque parametro --rm 


Habilitar debugger: Corremos todo, matamos django y solo volvemos a correr django en otra sesion para interactuar (-service-port para exponer los puertos)
$ docker-compse up
$ docker-compose ps
$ docker rm -f <ID_DJANGO>
$ docker-compose run --rm --service-ports django

Recordar comandos utiles de docker

$docker container
$docker images
$docker volume
$docker network

Y para estos tenemos ls, rm, prune (quitar todo lo que no se usa), -a (para mostar todo), -q (Para solo usar los ids) y --head


-------------------
Setups alternativos
-------------------

cookiecutter django: Better project template

De la clase 7 vayan a la 9 y la clase 8 la vean despues de la clase 13  "Creando el modelo de perfil de usuario" y 
luego continuen con la 14 normal

*********************************************************
************************ MODELOS ************************
*********************************************************

-------------------
Herencia de modelos
-------------------

Las clases heredan de django.db.models

Para que no se refleje en la base de datos usa class Meta: abstract=True

------------
Proxy models - Herencia
------------
Sin crear una nueva tabla en la BD
Las abstracta exponen molde atributo
proxy extienden de una tabla ya existente y agregan funciones de la clase

class Meta: proxy=True

---------------
App de usuarios
---------------
Creamos la app de usuario de forma manual. 
- Crear Folder users y dentro:
1- __init__.py para que sea un modulo de python
2- apps.py = class UsersAppConfig con name y verbose_name
3- Instalarla en config/settings/base.py  -> LOCAL_APPS
4- Folder: migrations que es un modulo. Por lo tanto debe tener el archivo __init__.py
5- models.py

Extension OCTOTREE para github

Django por default se loguea con username.
Se cambia a que se loguee por email, con la variable USERNAME_FIELD
Alternativas:
- extender de User Model con un OneToOneField
- Pero se recomiendo heredar de un propio usuario que hereda de AbstractUser

-------------------------------------------
Organizando modelos en un paquete de Django
-------------------------------------------
Validators para validar campos
En settings base.py hay que setear el Custom user en la variable AUTH_USER_MODEL

ValueError: Dependency on app with no migrations: users
Solucion
Detener el servicio
docker-compose run --rm --service-ports django python manage.py makemigrations
Iniciar de nuevo
$ docker-compose run --rm --service-ports django


django.db.migrations.exceptions.InconsistentMigrationHistory Migration admin.0001_initial is applied before its dependency users.0001_initial on database 'default'.
Incosistencia porque ya sea habia creado el model usuario (no el custom)
Solución
docker-compose ps
docker-compose down
docker volume ls
y borramos el cride-platzi_local_postgres_data
docker volume rm cride-platzi_local_postgres_data

Esto es para limpiar la bd

Luego corremos de nuevo. Levantamos el stack
docker-compose up

Y otra vez matamos el de django
docker-compose ps
docker rm -f cride-platzi_django_1
docker-compose run --rm --service-ports django

--------------------------------------
Creando el modelo de perfil de usuario
--------------------------------------
Primero cambiamos la version de django en requirements porque desde github nos avisaba de la vulnerabilidad.
Luego docker-compose build para construir nuevamente

--------------------------------
Aplicacion y modelo de circuitos
--------------------------------

Pasos 
docker images ls
export COMPOSE_FILE=local.yml
docker-compose up

export COMPOSE_FILE=local.yml
docker-compose ps
docker rm -f cride_django_
docker-compose run --rm --service-port django

export COMPOSE_FILE=local.yml

Crea el model Circle

-------------------------------
Migraciones y admin de círculos
-------------------------------
En las settings local.py tenemos instalada la app django_extensions
con la cual podemos ejecutar el comando shell_plus
docker-compose run --rm django python manage.py shell_plus
importa nuestros modelos y otros necesearios para no tener que hacerlos nosotros


import csv

def import_csv(csv_filename):
    with open(csv_filename, mode='r') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            circle = Circle(**row)
            circle.save()
            print(circle.name)


#filename = https://gist.github.com/pablotrinidad/93ee462e0ee761bd505f0a2fed3d1c8c
filename = 'cride/circles.csv'
import_csv(filename)


**************************************************************************************
************************ Introducción a Django REST Framework ************************
**************************************************************************************

--------------------------------------------------------------
Aprende cómo construir tu propio API con Django Rest Framework
--------------------------------------------------------------
agregamos djangorestframework==3.9.4 a requirements/base.txt
y reconstruimos todas las imagenes con docker-compose build

-----------------------------
Vistas, URLs y Parsers de DRF
-----------------------------
Instalamos la app de restframework en requirements/base.py en THIRD_PARTY_APPS

con el decorator @api_view ahora request es un objeto de rest_framework
https://www.django-rest-framework.org/api-guide/requests/
request.data de POST
request.query_params de GET
request.authenticators

https://gist.github.com/subfuzion/08c5d85437d5d4f00e58
curl http://localhost:8000/circles/ -v | python -m json.tool
curl -d '{"name":"caffe", "slug_name": "cafe"}' -H "Content-Type: application/json" -X POST http://localhost:8000/circles/create/ -v | python -m json.tool

-----------
Serializers
-----------
Son contenedores que nos permiten tomar tipos de datos complejos y convertirlos a datos nativos de python y usarlos como json, xml, etc.

from cride.circles.serializers import CircleSerializer 
circle = Circle.objects.latest()
serializer = CircleSerializer(circle)
serializer.data
{'name': 'caffe', 'slug_name': 'cafe', 'rides_taken': 0, 'rides_offered': 0, 'members_limit': 0}
y asi nos ahorramos hacer como en list_circles
data.append({
	'name'          : circle.name,
	'slug_name'     : circle.slug_name,
	'rides_taken'   : circle.rides_taken,
	'rides_offered' : circle.rides_offered,
	'members_limit' : circle.members_limit,
}

Tambien se puede serializar una query set

----------------------------------------------
Buenas prácticas para el diseño de un API REST
----------------------------------------------
Metodos - estados - headers

get,post,put,patch,delete
No mas de dos niveles

Filtering GET /movies/?status=release  
Sorting GET /movies/?sort=-release_date, update_at

Aliases GET /circles/verified
Fields GET /movies?fields=id,directros,status # preferible user graph sql
Pagination /moviles?page=4

REST: Es una serie de principio de cómo diseñar una web service. Un estilo de arquitectura.

4xx errores del cliente. 5xx errores del server

	200 - ok
	400 - bad request
	500 - Internal server error

HTTP Status Code:
    201: Creado - created
    304: No modificado - not modified
    404: No encontrado - not found
    401: No autorizado - unauthorized
    403: Prohibido o restringido. forbidden

Convenciones:
Cuando se crea un recurso, se lo devuelve
Devolver el error { code, message, description}

Versioning: porque los usuarios usan las API: GET /v1/movies

Authentication porque REST es stateless. EL mas comun es por token

Pro tips:
Usar SSL, cache, validar todo, proteger de CSRF(sucede cuando se autentica por sesion, por token es dificil que lo logren),
limita los requests, complementa la API con un SDK

--------------------------------------
Request, response, renderers y parsers
--------------------------------------
Parser. La api recibe datos de distintos tipos. Los parsers lo validan y lo pasan al request.
Renderers. Se definen en el setting por proyecto BrowsableAPIRenderer y JSONRenderer
BrowsableAPIRenderer crea un html
Entonces los renderers se encargan de como esta saliendo el contenido en el header accetps


**********************************************************
************************ Real DRF ************************
**********************************************************

--------------------------------------
Autenticacion y tipos de autenticacion
--------------------------------------

asocia la peticion a un usuario y luego al request se le asignan dos propiedades
- request.user (instancia de contrib.auth, en nuestro caso del custom user)
- request.auth (info sobre el metodo de autenticacion)

Sino se autentico nadie, es AnonymousUser

DOS Esquemas de autenticacion 
1. SessionAuthentication (el de cookies)
2. BasicAuthentication

Permissions:
A traves de authentication y de  throttling (limite de peticiones en un tiempo)

Una vez autorizado el usuario, este usuario tiene permiso de acceder a determinadas vistas,
que puede ser definido por los atributos del usuario si es admin o usuario normal o por el tipo de objeto de circulo
Todos los permisos heredan de basePermision que tiene dos metodos has_object_permission() y has_permission()
Django por default tiene expuestos algunos permisos allowAny, isAuthenticated , isAdminUser etc

Metodos de autenticacion:
1- Basic
	EN el header se envia Authorization: Basic y se envian las credenciales. Ex;  Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l 
2- Token
	COnjunto de caracteres unicos que te identifica y te da permisos
3- Session
	Usa las cookies, pero va contra principios de REST porque las sesiones no son stateless
4- OAuth
	Una aplicacion le da acceso de sus datos a otra aplicacion (no es autenticacion de usuarios)
5- JWT json web token
	Resuelve el problema de tener que almacenar la referencia a los tokens para que cuando lleguen 
	se los identifica al usuario. No hace falta guardarlo en una Base de datos. Relacion codigo-usuario. 
	3 partes: header, payload, firma criptografica

-------
APIView
-------
Cased based view

--------------------------------
Creando el token de autorización
--------------------------------
Token authentication no es seguro porque guarda los tokens en texto plano y se puede listar
y asi tener acceso a todos. Ya que es oneToOne, se genera una sola vez
rest_framework.authtoken

Los serializers comparten contexto que es un atributo de clase

curl localhost:8000/users/login -v | python -m json.tool

curl -d '{"email":"bcespedes@gmail.com", "password": "brian123"}' -H "Content-Type: application/json" -X POST http://localhost:8000/users/login/ -v | python -m json.tool

UserModelSerializer
UserLoginSerializer

------------
User sign up
------------
curl -X POST POST http://localhost:8000/users/signup/ -v

curl -d '{"email":"psilva@gmail.com", "password": "pablo12345", "password_confirmation": "pablo12345" , "username":"psilva", "first_name": "pablo", "last_name": "silva", "phone_number" : "+547811111"}' -H "Content-Type: application/json" -X POST http://localhost:8000/users/signup/ -v | python -m json.tool


----------------------------------------------
Limitar login a usuarios con cuenta verificada
----------------------------------------------
curl -d '{"email":"yborghi@gmail.com", "password": "yessica12345", "password_confirmation": "yessica12345" , "username":"yborghi", "first_name": "yessica", "last_name": "borghi", "phone_number" : "+5478111245"}' -H "Content-Type: application/json" -X POST http://localhost:8000/users/signup/ -v | python -m json.tool

eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoieWJvcmdoaSIsImV4cCI6MTU2NjU2NDE5NSwidHlwZSI6ImVtYWlsX2NvbmZpcm1hdGlvbiJ9.iP-ldb9Kmq7iP5EdLqbLdqQSk3ajZlSQT17fM_-RVCc

curl -d '{"email":"yborghi@gmail.com", "password": "yessica12345"}' -H "Content-Type: application/json" -X POST http://localhost:8000/users/login/ -v | python -m json.tool





--------------------------
Configurar envío de email
--------------------------
en settings/base.py esta configurado que los templates se van a buscar en APPS_DIR/template (APPS_DIR=cride)
A modo de prueba se incluye el token en el mail. Pero deberia ir a un frontend donde se incluye el token en la url
y el frontend intercambia al token con el backend

curl -d '{"email":"fmaresca@gmail.com", "password": "fernando12345", "password_confirmation": "fernando12345" , "username":"fmaresca", "first_name": "fernando", "last_name": "maresca", "phone_number" : "+4581658422"}' -H "Content-Type: application/json" -X POST http://localhost:8000/users/signup/ -v | python -m json.tool

curl -d '{"email":"fmaresca@gmail.com", "password": "fernando12345"}' -H "Content-Type: application/json" -X POST http://localhost:8000/users/login/ -v | python -m json.tool

-------------------------------
Instalar PyJWT y generar tokens
-------------------------------
https://github.com/jpadilla/pyjwt
pyjwt==1.7.1 en el requirementes/base.txt

shell_plus
import jwt
token = jwt.encode({'algo':'datos'}, settings.SECRET_KEY, algorithm='HS256')
settings.SECRET_KEY es la firma
Segun la doc si se agrega exp en UTC UNIX, no hay que hacer la validacion a mano, lanza una excepcion

Para decodificar
token = 'sdfsfsdfsd'
jwt.decode(token, settings.SECRET_KEY, algorithms=['HS256')
.{'user': 'juan', 'exp': 1566528016, 'type': 'email_confirmation'}

---------------------------
Verificar cuenta usando JWT
---------------------------
AccountVerificationSerializer se valida que el token de validacion sea correcto.
En este serializers se sobreescribe save() para cambiar el estado del usuario a verificado
No se sobreescribe el create porque no queremos retornar nada

curl -d '{"token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyIjoieWJvcmdoaSIsImV4cCI6MTU2NjYwMTE4NSwidHlwZSI6ImVtYWlsX2NvbmZpcm1hdGlvbiJ9.HpK8Ie7RoQOGgmebzdEB_9ZhINZMtQWa0XDxNy2jCBg"}' -H "Content-Type: application/json" -X POST http://localhost:8000/users/verify/ -v | python -m json.tool

"access_token": "5fc576274f5c1345a3333b531cc570b5ee168ed3",

-----------------------------------------
Actualizar modelo de circle (membership)
-----------------------------------------
Un circulo tiene varios usuarios miembros.
ManyToMany Usuario a través de el model Membership( que tiene otrs datos)
through_field cuando Membership hace referencia a dos Usuarios del mismo modelo(en este caso, el usuario que lo invito
al circulo, y el usuario del circulo)
Por esto se define el atributo 'related_name' en alguna de las referencias

makemigrations + migrate

-------------------
Crear CircleViewSet
-------------------
https://www.django-rest-framework.org/api-guide/generic-views/
Mixin es una clase que expone metodos
GnericAPIView Evita codifo repetidos como en UserLoginAPIView, UserSignUpAPIView y AccountVerificationAPIView

Viewsets son un conjunto de vistas que se encargan de estas funcionalidades (list, create, update, retrieve) 
ModelViewSet

Django REST Framework nos da DefaultRouter que recibe un viewset y él mismo genera los paths

-----------------------------------
Añadiendo autorización y paginación
-----------------------------------
Entonces urls con DefaultRouter, CircleViewSet (dos lineas), y CircleModelSerializer(definiendo los campos) basta para tener una API rest de circle

Postman? pecho peludo usa cURL

List circles: 
curl http://localhost:8000/circles/ | python -m json.tool

Create circle: 
curl -X POST -d '{"slug_name": "platzi-peru", "name": "Platzi Peru", "about": "Es platzi, pero en perú"}' -H "Content-Type: application/json" http://localhost:8000/circles/ -v | python -m json.tool

Get a Circle:
curl http://localhost:8000/circles/1/ | python -m json.tool

Update a circle: COmo es PUT, todos los campos requeridos los necesita si o si para hacer el update, 
curl -X PUT -d '{"slug_name": "platzi-colombia", "name": "Platzi Colombia", "about": "Es platzi, pero es colimbia"}' -H "Content-Type: application/json" http://localhost:8000/circles/26/ -v | python -m json.tool

Update some fields. No es necesario que todos los campos requeridos sean enviados
curl -X PATCH -d '{"slug_name": "platzi-colombiaAAA"}' -H "Content-Type: application/json" http://localhost:8000/circles/26/ -v | python -m json.tool

DELETE a circle;
curl -X DELETE http://localhost:8000/circles/26/
por convencion no regresa contenido, pero si el status 204 NO CONTENT

Ahora hay que agregar authenticacion y  permisos para determinar que usuarios pueden realizar las operaciones.
Para esto seteamos en settings/base.py DEFAULT_AUTHENTICATION_CLASSES en este caso usamos TokenAuthentication

Agregamos permisos en CircleViewSet
permission_classes = (IsAuthenticated,)

Ahora las consultas retornan
401 "detail": "Authentication credentials were not provided."
Enviar el header Authorization: Token {{access_token}}

curl -H "Authorization: Token 5fc576274f5c1345a3333b531cc570b5ee168ed3" http://localhost:8000/circles/ | python -m json.tool  

Agregamos paginacion en el settings/base.py opagination
Listamos solos los circulos publicos redefiniendo get_queryset() pero el queryset siguen siendo all()

--------------------
Creación de circulos
--------------------
Personaliza el CircleViewSet y que un miembre se genere como administrador del grupo y valida el limite del circulo
http://www.cdrf.co/3.9/rest_framework.mixins/CreateModelMixin.html

se redefine perform_create() Porque ModelViewSet que hereda da la clase CreateModelMixin, donde create() invoca a perform_create()

curl -X POST -d '{"slug_name": "platzi-peru", "name": "Platzi Peru", "about": "Es platzi, pero en perú"}' -H "Content-Type: application/json" -H "Authorization: Token 5fc576274f5c1345a3333b531cc570b5ee168ed3" http://localhost:8000/circles/ -v | python -m json.tool

Membership.objects.values('user','circle', 'is_admin')
Validacion de membresia en circleModelSerializer
En CircleModelSerializer validamos algunos datos y agregamos read_only_fields para que solo el admin del circulo pueda 
modificar los datos del circulo


--------------------------------------------------
Update de círculo, custom permissions y DRF Mixins
--------------------------------------------------
Para que nadie pueda borrar un circle. ModelViewSet hereda de todos los mixed. Hacemos esas herencias menos DestroyModel
Sobreescribimos  en ModelViewSet el metodo get_permissions para incluir el permiso de que solo el admin pueda modificar

Creamos el permiso IsCircleAdmin. y hay que agregarlo al ViewSet. MIRAR COMO HACERLO CON REST CONDITION


curl -X PATCH -d '{"slug_name": "platzi-paraguayyyyyyy"}' -H "Authorization: Token 5fc576274f5c1345a3333b531cc570b5ee168ed3" -H "Content-Type: application/json" http://localhost:8000/circles/34/ -v | python -m json.tool

curl -H "Authorization: Token 79f6b22c3c875a05801ce00fa8bc938596a2eda3" http://localhost:8000/circles/ | python -m json.tool  
curl -X PATCH -d '{"slug_name": "platzi-paraguayyyyyyy"}' -H "Content-Type: application/json" -H "Authorization: Token 79f6b22c3c875a05801ce00fa8bc938596a2eda3" http://localhost:8000/circles/34/ -v | python -m json.tool

"detail": "You do not have permission to perform this action."
Porque no es el admin del circulo entonces no tiene permisos

Token.objects.get(user__username='bcespedes')

------------------------------------------
Migración de vistas de usuarios a ViewSets
------------------------------------------
Los ViewSet actions se dividen en las que son de detalle y las que no
las de detalle son las que tienen el id /circles/5 si pero circles/reportes no
usar decorator @action

Si seteamos lookup_field='slug_name' en el Circle view, ya no sera /circle/{id} sino /circle/{slug_name} asi evitamos exponer el id

curl -X POST -d '{"slug_name": "fsociales", "name": "Facultad de sociales", "about": "la facu dsoc", "is_limited" : "True", "members_limit" : 12}' -H "Content-Type: application/json" -H "Authorization: Token 0c0d4b61f1aa5b92590a0ebc95d646699b437f68" http://localhost:8000/circles/ -v | python -m json.tool

en Users reemplazamos las APIView por UserViewSet con action

------------------
Detalle de usuario
------------------
Para que la clase UserViewSet devuelva el detalle de un model, puede heredar de RetrieveModelMixin
por lo tanto hay que configurar un queryset base

User detail
curl -H "Authorization: Token 0c0d4b61f1aa5b92590a0ebc95d646699b437f68" http://localhost:8000/users/bcespedes/ | python -m json.tool

Se agrega al detalle los circulos a los cuales, el usuario es miembro
Para esto sobreescribimos retrieve y agregamos data extra (los circulos)
consultas Many to many
https://docs.djangoproject.com/en/2.2/topics/db/models/#extra-fields-on-many-to-many-relationships

-------------------
Update profile data
-------------------
Solo el mismo dueño de la cuenta puede modificar su informacion de usuario

curl -X PUT -H "Authorization: Token 0c0d4b61f1aa5b92590a0ebc95d646699b437f68" -H "Content-Type: application/json" -d '{"email": "briangonzaloc@gmail.com", "username": "briangonzaloc"}'  http://localhost:8000/users/bcespedes/ | python -m json.tool

curl -X PATCH -H "Authorization: Token 0c0d4b61f1aa5b92590a0ebc95d646699b437f68" -H "Content-Type: application/json" -d '{"email": "bcespedes@gmail.com", "phone_number" : "+5488888888"}'  http://localhost:8000/users/bcespedes/ | python -m json.tool


/users/bcespedes/profile
creamos @action profile
creamos ProfileModelSerializer
definimos profile en UserModelSerializer

El form data -F/--form para enviar una picture

curl -X PATCH -F "picture=@~/Descargas/qac.png" -H "Authorization: Token 0c0d4b62f1aa5b92590a0ebc95d646699b437f68" -H "Content-Type: application/json" -d '{"biography": "argentina"}'  http://localhost:8000/users/bcespedes/profile/ | python -m json.tool

-------------------------------
List members - Recursos anidado
-------------------------------
Listar los miembros de un circulo /circles/slug_name/memebers
se crea la vista MembershipViewSet con un metodo comun que se ejecute siempre para obtener el circulo.
Para esto sobreescribimos el mteodo dispatch de GenericViewSet
Creamos el serializer MembershipModelSerializer con la propiedad joined_at que es cuando se unió al grupo(no esta en la BD, pero si created)
StringRelatedField para imprimir el username, no el id del invited_by
Se crea IsActiveCircleMember para que solos los miembros del circulo puedan acceder al detalle del mismo

curl -H "Authorization: Token 79f6b22c3c875a05801ce00fa8bc938596a2eda3" http://localhost:8000/circles/platzi-peru/members/ | python -m json.tool

-----------------------
Retrieve destroy member
-----------------------
Recuperamos un miembro user de un ciruclo /circles/slug_name/memebers/bcespedes/
Sobreescribimos el metodo get_object() en MembershipViewSet

Borrar membership: Pero solo queremos setear is_Active en false
DestroyModelMixin tiene los methods destroy and perform_destroy(este hace el delete) entonces sobreescribrimos el perform_destroy
http://www.cdrf.co/

curl -X DELETE -H "Authorization: Token 5fc576274f5c1345a3333b531cc570b5ee168ed3" http://localhost:8000/circles/platzi-peru/members/yborghi/ | python -m json.tool
response 204 no content

--------------------------------
Modelo de invitaciones y manager
--------------------------------
Una invitacion tiene un codigo, quien la emitio, quien la uso, usado, a que circulo pertenece

Manager es una interfaz para comunicarse con la bd. Lo usamos para controlar la forma de crear la invitaciones
https://docs.djangoproject.com/en/2.2/topics/db/managers/
Circle.top_five()
top_five es un Manager

u = User.objects.first()
c = Circle.objects.first()
Invitation.objects.create(issued_by=u, circle=c)

----------------------------------
Obtener invitaciones de un miembro
----------------------------------
Una vista que genere todos los codigos que un usuario tiene disponible para distrubuir a sus amigos y a quien invito
/circles/platzi-peru/memebers/bcespedes/invitations/

brian = User.objects.get(username='bcespedes')
y = User.objects.get(username='yborghi')
c = Circle.objects.get(slug_name='platzi-peru')

Membership.objects.create(user=brian, profile=brian.profile, circle=c, invited_by)

curl -H "Authorization: Token 5fc576274f5c1345a3333b531cc570b5ee168ed3" http://localhost:8000/circles/platzi-ecuador/members/yborghi/invitations/

Reto crear un permiso para permitir acceso solo al mismo usuario

--------------
Unirse a grupo
--------------